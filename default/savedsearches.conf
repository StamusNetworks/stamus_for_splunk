[New IDS alerts on internal IP]
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = Alert when signature fires on one internal IP address during the last 5 mins but did not fire during the last hour
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.events.fields = ["host","source","hostname"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = timeline_app.timeline
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = stamus
request.ui_dispatch_view = search
search = event_type=alert earliest=-1h | eval internal_ip=if(like(src_ip, "10.%") OR like(src_ip, "192.168.%"), src_ip, dest_ip) | eval ext_ip=if(like(src_ip, "10.%") OR like(src_ip, "192.168.%"), dest_ip, src_ip) | eval internal_port=if(like(src_ip, "10.%"), src_port, dest_port) | eval ext_port=if(like(src_ip, "10.%"), dest_port, src_port) | stats earliest(timestamp) as first, values(ext_ip) as other_ip, values(internal_port) as internal_port, values(ext_port) as other_port by alert.category, alert.signature, alert.signature_id, internal_ip | eval difftime=now()-strptime(first,"%Y-%m-%dT%H:%M:%S.%N%z") | eval alert_needed=if(difftime<60,"true", "false") | search alert_needed=true | table alert.signature alert.signature_id internal_ip internal_port other_ip other_port first

[Domain Controllers List]
action.email.useNSSubject = 1
alert.track = 0
description = List of domain controllers in the network using Stamus Networks data
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
dispatchAs = user
display.events.fields = ["host","source","hostname"]
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.charting.chart = pie
display.visualizations.custom.type = force_directed_viz.force_directed
display.visualizations.show = 0
request.ui_dispatch_app = stamus
request.ui_dispatch_view = search
search = | hostidsearch filter="services.values.app_proto=smb services.values.app_proto=krb5 services.port=389" | spath net_info{0}.agg output=Network | spath hostname{}.host output=Host | spath | table ip Host Network first_seen

[HTTP Servers]
action.email.useNSSubject = 1
alert.track = 0
description = Stamus Networks data on HTTP servers including Version, Port and Network information
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
dispatchAs = user
display.events.fields = ["host","source","hostname"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = pie
display.visualizations.custom.type = force_directed_viz.force_directed
display.visualizations.show = 0
request.ui_dispatch_app = stamus
request.ui_dispatch_view = search
search = | hostidsearch filter="services.values.app_proto=http net_info.agg!=internet" | spath path=services{} output=service_info | mvexpand service_info | spath ip | spath input=service_info path=values{} output=service_details | mvexpand service_details | spath input=service_details | search app_proto=http | spath input=service_info port | spath net_info{0}.agg output=Net| eval Network=if(isnull(Net), "Unknown", Net) | table ip Network port http.server

[TLS servers not running on port 443]
action.email.useNSSubject = 1
alert.track = 0
description = Stamus Networks data on TLS servers not running on port 443.
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
dispatchAs = user
display.events.fields = ["host","source","hostname"]
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.charting.chart = pie
display.visualizations.custom.type = force_directed_viz.force_directed
display.visualizations.show = 0
request.ui_dispatch_app = stamus
request.ui_dispatch_view = search
search = | hostidsearch filter="services.values.app_proto=tls services.port!=443" | spath path=services{} output=service_info | mvexpand service_info | spath ip | spath input=service_info path=values{} output=service_details | mvexpand service_details | spath input=service_details | search app_proto=tls | spath input=service_info port | spath net_info{0}.agg output=Network | table ip Network port tls.fingerprint tls.issuerdn tls.subject

[Threats by Network]
action.email.useNSSubject = 1
alert.track = 0
description = Stamus Networks data on Threat seen by Network.
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
dispatchAs = user
display.events.fields = ["host","source","hostname"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = pie
display.visualizations.show = 0
request.ui_dispatch_app = stamus
request.ui_dispatch_view = search
search = event_type="stamus" | eval Network = if('stamus.asset_net_info' == "", "Unknown", 'stamus.asset_net_info') | stamusthreatfilter | stats dc(stamus.asset) as Assets by Network, threat_name

[HTTP Servers not running on port 80]
action.email.useNSSubject = 1
alert.track = 0
description = Stamus Networks data on HTTP servers not running on standard port.
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
dispatchAs = user
display.events.fields = ["host","source","hostname"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = pie
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.show = 0
display.visualizations.type = singlevalue
request.ui_dispatch_app = stamus
request.ui_dispatch_view = search
search = | hostidsearch filter="services.values.app_proto=http services.port!=80" | spath ip | spath services{}.port output=port | spath services{}.values{}.http{}.server output=server| table ip port server

[Assets under Attack]
action.email.useNSSubject = 1
alert.track = 0
description = Report is using Stamus Network data.
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
dispatchAs = user
display.events.fields = ["host","source","hostname"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = pie
display.visualizations.show = 0
request.ui_dispatch_app = stamus
request.ui_dispatch_view = search
search = event_type="stamus" | lookup hostidlookup ip as stamus.asset | stamusthreatfilter | stats min(timestamp) as start_seen, max(timestamp) as last_seen by threat_name, stamus.asset, stamus.asset_net_info, hostname

[Recent services by Stamus Networks]
action.email.useNSSubject = 1
alert.track = 0
description = Stamus Networks data on services discovered during picked time range.
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
dispatchAs = user
display.events.fields = ["host","source","hostname"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = pie
display.visualizations.custom.type = force_directed_viz.force_directed
display.visualizations.show = 0
request.ui_dispatch_app = stamus
request.ui_dispatch_view = search
search = | hostidsearch filter="net_info.agg!=internet" | spath services_count | search services_count > 1 | spath path=services{} output=service_info | mvexpand service_info | spath ip | spath input=service_info path=values{} output=service_details | mvexpand service_details | spath input=service_details | eval start_seen=strptime(first_seen, "%Y-%m-%dT%H:%M:%S.%6N%z") | addinfo | eval diff_start=(tonumber(start_seen) - info_min_time) | search diff_start > 0 | eval diff_end=(info_max_time - tonumber(start_seen)) | search diff_end > 0|  spath input=service_info port | spath net_info{0}.agg output=Net| eval Network=if(isnull(Net), "Unknown", Net) | table ip Network port app_proto first_seen
